From 26731632bfb2bc345951c8aefdf9f2a77f4c0b13 Mon Sep 17 00:00:00 2001
From: Minecrell <minecrell@minecrell.net>
Date: Fri, 6 Mar 2020 00:02:09 +0530
Subject: [PATCH] Add console command completion

Register command completer for JLine to complete command names and
command arguments (if supported).

diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
index e7cd8a27..d86db9ba 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
@@ -9,6 +9,7 @@ import java.io.InputStream;
 import java.lang.reflect.Method;
 import java.net.URL;
 import java.net.URLClassLoader;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
@@ -205,6 +206,45 @@ public final class PluginManager
         return true;
     }
 
+    /**
+     * Searches for tab-complete suggestions for the given command line.
+     *
+     * <p>This is similar to {@link #dispatchCommand(CommandSender, String, List)}
+     * called with a list, but it also handles completing the command names itself
+     * instead of just the arguments.</p>
+     *
+     * @param sender The command sender
+     * @param commandLine The current command line
+     * @return The tab-complete suggestions
+     */
+    public List<String> tabCompleteCommand(CommandSender sender, String commandLine)
+    {
+        List<String> suggestions = new ArrayList<>();
+
+        if ( commandLine.indexOf( ' ' ) == -1 )
+        {
+            // Complete command name
+            for ( Command command : this.commandMap.values() )
+            {
+                if ( command.getName().startsWith( commandLine ) )
+                {
+                    // Check command permissions before adding it to the suggestions
+                    String permission = command.getPermission();
+                    if ( permission == null || permission.isEmpty() || sender.hasPermission( permission ) )
+                    {
+                        suggestions.add( command.getName() );
+                    }
+                }
+            }
+        } else
+        {
+            // Complete command arguments
+            dispatchCommand( sender, commandLine, suggestions );
+        }
+
+        return suggestions;
+    }
+
     /**
      * Returns the {@link Plugin} objects corresponding to all loaded plugins.
      *
diff --git a/proxy/src/main/java/me/jesfot/waterfallmc/altwaterfall/console/ConsoleCommandCompleter.java b/proxy/src/main/java/me/jesfot/waterfallmc/altwaterfall/console/ConsoleCommandCompleter.java
new file mode 100644
index 00000000..766e1c9b
--- /dev/null
+++ b/proxy/src/main/java/me/jesfot/waterfallmc/altwaterfall/console/ConsoleCommandCompleter.java
@@ -0,0 +1,35 @@
+package me.jesfot.waterfallmc.altwaterfall.console;
+
+import net.md_5.bungee.api.ProxyServer;
+import org.jline.reader.Candidate;
+import org.jline.reader.Completer;
+import org.jline.reader.LineReader;
+import org.jline.reader.ParsedLine;
+
+import java.util.List;
+
+final class ConsoleCommandCompleter implements Completer
+{
+
+    private final ProxyServer proxy;
+
+    ConsoleCommandCompleter(final ProxyServer proxy)
+    {
+        this.proxy = proxy;
+    }
+
+    @Override
+    public void complete(LineReader reader, ParsedLine line, List<Candidate> candidates)
+    {
+        List<String> suggestions = proxy.getPluginManager().tabCompleteCommand( proxy.getConsole(), line.line() );
+        if ( suggestions.isEmpty() )
+        {
+            return;
+        }
+
+        for ( String suggestion : suggestions )
+        {
+            candidates.add( new Candidate( suggestion ) );
+        }
+    }
+}
\ No newline at end of file
diff --git a/proxy/src/main/java/me/jesfot/waterfallmc/altwaterfall/console/WaterfallConsole.java b/proxy/src/main/java/me/jesfot/waterfallmc/altwaterfall/console/WaterfallConsole.java
index e0506c45..2d14b1c5 100644
--- a/proxy/src/main/java/me/jesfot/waterfallmc/altwaterfall/console/WaterfallConsole.java
+++ b/proxy/src/main/java/me/jesfot/waterfallmc/altwaterfall/console/WaterfallConsole.java
@@ -15,7 +15,7 @@ public final class WaterfallConsole extends SimpleTerminalConsole
     protected LineReader buildReader(LineReaderBuilder builder)
     {
         ProxyServer proxy = ProxyServer.getInstance();
-        return super.buildReader( builder.appName( proxy.getName() ) );
+        return super.buildReader( builder.appName( proxy.getName() ).completer( new ConsoleCommandCompleter( proxy ) ) );
     }
 
     @Override
-- 
2.24.0.windows.2

