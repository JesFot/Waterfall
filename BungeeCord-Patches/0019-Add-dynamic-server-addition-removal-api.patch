From cc56f387d7f26e2b19e12e0faa6e476de302d503 Mon Sep 17 00:00:00 2001
From: Troy Frew <fuzzy_bot@arenaga.me>
Date: Thu, 5 Mar 2020 22:47:10 +0530
Subject: [PATCH] Add dynamic server addition/removal api.

The provided methods will not move a player if a server is removed or
the server ip/port is changed, however the methods return the old
ServerInfo object for you to handle that yourself if needed.

Thanks to Overcast for the idea

diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
index af18d8fd..ac498b51 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
@@ -39,7 +39,10 @@ public interface ProxyConfig
      * Set of all servers.
      *
      * @return servers
++     * @deprecated The returned map may be modified concurrently by the proxy.
++     *             The safe alternative is {@link #getServersCopy()}.
      */
+    @Deprecated
     Map<String, ServerInfo> getServers();
 
     /**
@@ -130,4 +133,83 @@ public interface ProxyConfig
     // AltWaterfall Options
     //
 
+    /**
+     * Return all servers registered to this proxy, keyed by name. The returned map
+     * is an immutable snapshot of the actual server collection. It cannot be modified,
+     * and it will not change.
+     *
+     * @return all registered remote server destinations
+     */
+    Map<String, ServerInfo> getServersCopy();
+
+    /**
+     * Gets the server info of a server.
+     *
+     * @param name the name of the configured server
+     * @return the server info belonging to the specified server
+     */
+    ServerInfo getServerInfo(String name);
+
+    /**
+     * Register the given server to the proxy.
+     * Any currently registered server with the same name will be replaced.
+     * This change is not saved to config.yml
+     *
+     * @param server The server to register with the proxy
+     *
+     * @return the previously registered server with the same name, or null if there was no such server.
+     */
+    ServerInfo addServer(ServerInfo server);
+
+    /**
+     * Register all of the given servers to the proxy.
+     * This change is not saved to config.yml
+     *
+     * @param servers The collection of servers to register with the proxy
+     *
+     * @return true if any servers were added or replaced.
+     */
+    boolean addServers(Collection<ServerInfo> servers);
+
+    /**
+     * Un-register the server with the given name from the proxy.
+     * This change is not saved to config.yml
+     *
+     * @param name The name of the server to unregister
+     *
+     * @return the server that was removed, or null if there is no server with the given name.
+     */
+    ServerInfo removeServerNamed(String name);
+
+    /**
+     * Un-register the given server from the proxy.
+     * The server is matched by name only, other fields in the given {@link ServerInfo} are ignored.
+     * This change is not saved to config.yml
+     *
+     * @param server the server to unregister from the proxy
+     *
+     * @return the server that was removed, or null if there is no server with a matching name.
+     */
+    ServerInfo removeServer(ServerInfo server);
+
+    /**
+     * Un-register servers with any of the given names from the proxy.
+     * This change is not saved to config.yml
+     *
+     * @param names a collection of server names to be unregistered
+     *
+     * @return true if any servers were removed.
+     */
+    boolean removeServersNamed(Collection<String> names);
+
+    /**
+     * Un-register all of the given servers from the proxy.
+     * The servers are matched by name only, other fields in the given {@link ServerInfo} are ignored.
+     * This change is not saved to config.yml
+     *
+     * @param servers a collection of servers to be unregistered
+     *
+     * @return true if any servers were removed.
+     */
+    boolean removeServers(Collection<ServerInfo> servers);
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyServer.java b/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
index 1f330bd2..4c0d6814 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
@@ -96,9 +96,23 @@ public abstract class ProxyServer
      * return a fresh map each time.
      *
      * @return all registered remote server destinations
+     *
+     * @deprecated The returned map is part of the proxy's internal state,
+     *             and may be modified concurrently by the proxy.
+     *             The safe alternative is {@link #getServersCopy()}.
      */
+    @Deprecated
     public abstract Map<String, ServerInfo> getServers();
 
+    /**
+     * Return all servers registered to this proxy, keyed by name. The returned map
+     * is an immutable snapshot of the actual server collection. It cannot be modified,
+     * and it will not change.
+     *
+     * @return all registered remote server destinations
+     */
+    public abstract Map<String, ServerInfo> getServersCopy();
+
     /**
      * Gets the server info of a server.
      *
diff --git a/module/cmd-server/src/main/java/net/md_5/bungee/module/cmd/server/CommandServer.java b/module/cmd-server/src/main/java/net/md_5/bungee/module/cmd/server/CommandServer.java
index 59c104d3..8ea82fc6 100644
--- a/module/cmd-server/src/main/java/net/md_5/bungee/module/cmd/server/CommandServer.java
+++ b/module/cmd-server/src/main/java/net/md_5/bungee/module/cmd/server/CommandServer.java
@@ -32,7 +32,7 @@ public class CommandServer extends Command implements TabExecutor
     @Override
     public void execute(CommandSender sender, String[] args)
     {
-        Map<String, ServerInfo> servers = ProxyServer.getInstance().getServers();
+        Map<String, ServerInfo> servers = ProxyServer.getInstance().getServersCopy();
         if ( args.length == 0 )
         {
             if ( sender instanceof ProxiedPlayer )
@@ -83,7 +83,7 @@ public class CommandServer extends Command implements TabExecutor
     @Override
     public Iterable<String> onTabComplete(final CommandSender sender, final String[] args)
     {
-        return ( args.length > 1 ) ? Collections.EMPTY_LIST : Iterables.transform( Iterables.filter( ProxyServer.getInstance().getServers().values(), new Predicate<ServerInfo>()
+        return ( args.length > 1 ) ? Collections.EMPTY_LIST : Iterables.transform( Iterables.filter( ProxyServer.getInstance().getServersCopy().values(), new Predicate<ServerInfo>()
         {
             private final String lower = ( args.length == 0 ) ? "" : args[0].toLowerCase( Locale.ROOT );
 
diff --git a/proxy/src/main/java/me/jesfot/waterfallmc/altwaterfall/conf/WaterfallConfiguration.java b/proxy/src/main/java/me/jesfot/waterfallmc/altwaterfall/conf/WaterfallConfiguration.java
index f30d72fc..a717ce60 100644
--- a/proxy/src/main/java/me/jesfot/waterfallmc/altwaterfall/conf/WaterfallConfiguration.java
+++ b/proxy/src/main/java/me/jesfot/waterfallmc/altwaterfall/conf/WaterfallConfiguration.java
@@ -5,13 +5,14 @@ import java.io.File;
 import net.md_5.bungee.conf.Configuration;
 import net.md_5.bungee.conf.YamlConfig;
 
-public class WaterfallConfiguration extends Configuration {
+public class WaterfallConfiguration extends Configuration
+{
 
     @Override
-    public void load() {
+    public void load()
+    {
         super.load();
-        YamlConfig config = new YamlConfig(new File("waterfall.yml"));
-        config.load(false); // Load, but no permissions
+        YamlConfig config = new YamlConfig( new File( "waterfall.yml" ) );
+        config.load( false ); // Load, but no permissions
     }
-
 }
\ No newline at end of file
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index ad543482..17b799d0 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -635,10 +635,16 @@ public class BungeeCord extends ProxyServer
         return config.getServers();
     }
 
+    @Override
+    public Map<String, ServerInfo> getServersCopy()
+    {
+        return config.getServersCopy();
+    }
+
     @Override
     public ServerInfo getServerInfo(String name)
     {
-        return getServers().get( name );
+        return config.getServerInfo( name );
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java b/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
index a896f4f8..0e0bb9c5 100644
--- a/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
+++ b/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
@@ -1,6 +1,8 @@
 package net.md_5.bungee.conf;
 
 import com.google.common.base.Preconditions;
+import com.google.common.collect.ImmutableMap;
+
 import gnu.trove.map.TMap;
 import java.io.File;
 import java.io.IOException;
@@ -12,6 +14,7 @@ import java.util.UUID;
 import java.util.logging.Level;
 import javax.imageio.ImageIO;
 import lombok.Getter;
+import lombok.Synchronized;
 import net.md_5.bungee.api.Favicon;
 import net.md_5.bungee.api.ProxyConfig;
 import net.md_5.bungee.api.ProxyServer;
@@ -42,6 +45,7 @@ public abstract class Configuration implements ProxyConfig
      * Set of all listeners.
      */
     private Collection<ListenerInfo> listeners;
+    private final Object serversLock = new Object();
     /**
      * Set of all servers.
      */
@@ -68,6 +72,7 @@ public abstract class Configuration implements ProxyConfig
     private boolean preventProxyConnections;
     private boolean forgeSupport;
 
+    @Synchronized("serversLock")
     public void load()
     {
         ConfigurationAdapter adapter = ProxyServer.getInstance().getConfigurationAdapter();
@@ -114,7 +119,7 @@ public abstract class Configuration implements ProxyConfig
             servers = new CaseInsensitiveMap<>( newServers );
         } else
         {
-            Map<String, ServerInfo> oldServers = servers;
+            Map<String, ServerInfo> oldServers = getServersCopy();
             Map<String, ServerInfo> removedServers = new HashMap<String, ServerInfo>();
 
             for ( ServerInfo oldServer : oldServers.values() )
@@ -190,4 +195,76 @@ public abstract class Configuration implements ProxyConfig
     {
         return favicon;
     }
+
+    @Override
+    @Synchronized("serversLock")
+    public Map<String, ServerInfo> getServersCopy()
+    {
+        return ImmutableMap.copyOf( servers );
+    }
+
+    @Override
+    @Synchronized("serversLock")
+    public ServerInfo getServerInfo(String name)
+    {
+        return this.servers.get( name );
+    }
+
+    @Override
+    @Synchronized("serversLock")
+    public ServerInfo addServer(ServerInfo server)
+    {
+        return this.servers.put( server.getName(), server );
+    }
+
+    @Override
+    @Synchronized("serversLock")
+    public boolean addServers(Collection<ServerInfo> servers)
+    {
+        boolean changed = false;
+        for ( ServerInfo server : servers )
+        {
+            if ( server != this.servers.put( server.getName(), server ) )
+            {
+                changed = true;
+            }
+        }
+        return changed;
+    }
+
+    @Override
+    @Synchronized("serversLock")
+    public ServerInfo removeServerNamed(String name)
+    {
+        return this.servers.remove( name );
+    }
+
+    @Override
+    @Synchronized("serversLock")
+    public ServerInfo removeServer(ServerInfo server)
+    {
+        return this.servers.remove( server.getName() );
+    }
+
+    @Override
+    @Synchronized("serversLock")
+    public boolean removeServersNamed(Collection<String> names)
+    {
+        return this.servers.keySet().removeAll( names );
+    }
+
+    @Override
+    @Synchronized("serversLock")
+    public boolean removeServers(Collection<ServerInfo> servers)
+    {
+        boolean changed = false;
+        for ( ServerInfo server : servers )
+        {
+            if ( null != this.servers.remove( server.getName() ) )
+            {
+                changed = true;
+            }
+        }
+        return changed;
+    }
 }
-- 
2.24.0.windows.2

