From d5ce9c46bb1eefefd51dde561b0b8e1f417c87ec Mon Sep 17 00:00:00 2001
From: Tux <write@imaginarycode.com>
Date: Thu, 5 Mar 2020 23:29:39 +0530
Subject: [PATCH] Optionally use async Netty DNS resolver

We no longer need to cache the address for the session server now.

diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
index 34d6c98f..4971171e 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
@@ -140,6 +140,13 @@ public interface ProxyConfig
      */
     String getGameVersion();
 
+    /**
+     * Whether Netty's async DNS resolver is used for account authentication.
+     *
+     * @return whether Netty's async DNS resolver is used for account authentication.
+     */
+    boolean isUseNettyDnsResolver();
+
     /**
      * Return all servers registered to this proxy, keyed by name. The returned map
      * is an immutable snapshot of the actual server collection. It cannot be modified,
diff --git a/proxy/pom.xml b/proxy/pom.xml
index 5ae1dabb..a512a8ab 100644
--- a/proxy/pom.xml
+++ b/proxy/pom.xml
@@ -41,6 +41,13 @@
             <version>${netty.version}</version>
             <scope>compile</scope>
         </dependency>
+        <!-- Add Netty DNS resolver -->
+        <dependency>
+            <groupId>io.netty</groupId>
+            <artifactId>netty-resolver-dns</artifactId>
+            <version>${netty.version}</version>
+            <scope>compile</scope>
+        </dependency>
         <dependency>
             <groupId>io.netty</groupId>
             <artifactId>netty-handler</artifactId>
diff --git a/proxy/src/main/java/me/jesfot/waterfallmc/altwaterfall/conf/WaterfallConfiguration.java b/proxy/src/main/java/me/jesfot/waterfallmc/altwaterfall/conf/WaterfallConfiguration.java
index 799bbca5..7ff1eb38 100644
--- a/proxy/src/main/java/me/jesfot/waterfallmc/altwaterfall/conf/WaterfallConfiguration.java
+++ b/proxy/src/main/java/me/jesfot/waterfallmc/altwaterfall/conf/WaterfallConfiguration.java
@@ -16,6 +16,7 @@ public class WaterfallConfiguration extends Configuration
         YamlConfig config = new YamlConfig( new File( "waterfall.yml" ) );
         config.load( false ); // Load, but no permissions
         gameVersion = config.getString( "game_version", "" ).isEmpty() ? String.join( ", ", ProtocolConstants.SUPPORTED_VERSIONS ) : config.getString( "game_version", "" );
+        useNettyDnsResolver = config.getBoolean("use_netty_dns_resolver", useNettyDnsResolver);
     }
 
     /**
@@ -24,9 +25,21 @@ public class WaterfallConfiguration extends Configuration
      */
     private String gameVersion;
 
+    /**
+     * Whether we use Netty's async DNS resolver for the HttpClient.
+     * <p>Default is true (use Netty's async DNS resolver)</p>
+     */
+    private boolean useNettyDnsResolver = true;
+
     @Override
     public String getGameVersion()
     {
         return gameVersion;
     }
+
+    @Override
+    public boolean isUseNettyDnsResolver()
+    {
+        return useNettyDnsResolver;
+    }
 }
\ No newline at end of file
diff --git a/proxy/src/main/java/net/md_5/bungee/http/HttpClient.java b/proxy/src/main/java/net/md_5/bungee/http/HttpClient.java
index e0c52f21..9a2a92d1 100644
--- a/proxy/src/main/java/net/md_5/bungee/http/HttpClient.java
+++ b/proxy/src/main/java/net/md_5/bungee/http/HttpClient.java
@@ -13,13 +13,18 @@ import io.netty.handler.codec.http.HttpHeaderNames;
 import io.netty.handler.codec.http.HttpMethod;
 import io.netty.handler.codec.http.HttpRequest;
 import io.netty.handler.codec.http.HttpVersion;
+import io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider;
+import io.netty.resolver.dns.DnsAddressResolverGroup;
+
 import java.net.InetAddress;
+import java.net.InetSocketAddress;
 import java.net.URI;
 import java.net.UnknownHostException;
 import java.util.concurrent.TimeUnit;
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.api.Callback;
+import net.md_5.bungee.api.ProxyServer;
 import net.md_5.bungee.netty.PipelineUtils;
 
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
@@ -28,8 +33,8 @@ public class HttpClient
 
     public static final int TIMEOUT = 5000;
     private static final Cache<String, InetAddress> addressCache = CacheBuilder.newBuilder().expireAfterWrite( 1, TimeUnit.MINUTES ).build();
+    private static final DnsAddressResolverGroup dnsResolverGroup = new DnsAddressResolverGroup( PipelineUtils.getDatagramChannel(), DefaultDnsServerAddressStreamProvider.INSTANCE );
 
-    @SuppressWarnings("UnusedAssignment")
     public static void get(String url, EventLoop eventLoop, final Callback<String> callback)
     {
         Preconditions.checkNotNull( url, "url" );
@@ -57,20 +62,6 @@ public class HttpClient
             }
         }
 
-        InetAddress inetHost = addressCache.getIfPresent( uri.getHost() );
-        if ( inetHost == null )
-        {
-            try
-            {
-                inetHost = InetAddress.getByName( uri.getHost() );
-            } catch ( UnknownHostException ex )
-            {
-                callback.done( null, ex );
-                return;
-            }
-            addressCache.put( uri.getHost(), inetHost );
-        }
-
         ChannelFutureListener future = new ChannelFutureListener()
         {
             @Override
@@ -91,8 +82,40 @@ public class HttpClient
                 }
             }
         };
+        
+        if (ProxyServer.getInstance().getConfig().isUseNettyDnsResolver())
+        {
+            getWithNettyResolver( eventLoop, uri, port, future, callback, ssl );
+        } else
+        {
+            getWithDefaultResolver( eventLoop, uri, port, future, callback, ssl );
+        }
+    }
 
-        new Bootstrap().channel( PipelineUtils.getChannel( null ) ).group( eventLoop ).handler( new HttpInitializer( callback, ssl, uri.getHost(), port ) ).
-                option( ChannelOption.CONNECT_TIMEOUT_MILLIS, TIMEOUT ).remoteAddress( inetHost, port ).connect().addListener( future );
+    private static void getWithNettyResolver(EventLoop eventLoop, URI uri, int port, ChannelFutureListener future, Callback<String> callback, boolean ssl)
+    {
+        InetSocketAddress address = InetSocketAddress.createUnresolved( uri.getHost(), port );
+        new Bootstrap().channel( PipelineUtils.getChannel( null ) ).group( eventLoop ).handler( new HttpInitializer( callback, ssl, uri.getHost(), port ) )
+                    .option( ChannelOption.CONNECT_TIMEOUT_MILLIS, TIMEOUT ).resolver( dnsResolverGroup ).remoteAddress( address ).connect().addListener( future );
+    }
+
+    private static void getWithDefaultResolver(EventLoop eventLoop, URI uri, int port, ChannelFutureListener future, Callback<String> callback, boolean ssl)
+    {
+        // This is identical to the Bungee implementation of #get other than the absence of the ChannelFutureListener creation
+        InetAddress inetHost = addressCache.getIfPresent( uri.getHost() );
+        if ( inetHost == null )
+        {
+            try
+            {
+                inetHost = InetAddress.getByName( uri.getHost() );
+            } catch ( UnknownHostException ex )
+            {
+                callback.done( null, ex );
+                return;
+            }
+            addressCache.put( uri.getHost(), inetHost );
+        }
+        new Bootstrap().channel( PipelineUtils.getChannel( null ) ).group( eventLoop ).handler( new HttpInitializer( callback, ssl, uri.getHost(), port ) )
+                    .option( ChannelOption.CONNECT_TIMEOUT_MILLIS, TIMEOUT ).remoteAddress( inetHost, port ).connect().addListener( future );
     }
 }
-- 
2.24.0.windows.2

